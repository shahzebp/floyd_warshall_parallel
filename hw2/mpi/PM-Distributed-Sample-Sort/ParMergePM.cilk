#include <cilk.h>
#include <iostream>
#include <vector>

using namespace std;

#define m_val 225

void merge(double *dist, double *temp, unsigned long long p1, unsigned long long r1, unsigned long long p2, unsigned long long r2, unsigned long long p3)
{
    unsigned long long i, j, k;
    unsigned long long n1 = r1 - p1 + 1;
    unsigned long long n2 = r2 - p2 + 1;

    double *L = NULL, *R = NULL;

    L = new double[n1];
    R = new double[n2];

    for (i = 0; i < n1; i++)
        L[i] = temp[p1 + i];
    for (j = 0; j < n2; j++)
        R[j] = temp[p2 + j];

    i = 0;
    j = 0;
    k = p3;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            dist[k] = L[i];
            i++;
        }
        else
        {
            dist[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        dist[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        dist[k] = R[j];
        j++;
        k++;
    }
    delete [] L;
    delete [] R;
}

void insertionSort(double *dist, unsigned long long l, unsigned long long r)
{
   unsigned long long i, j;
   double key;
   for (i = l + 1; i < r; i++)
   {
       key = dist[i];
       j = i-1;

       while (j >= l && dist[j] > key)
       {
           dist[j+1] = dist[j];
           j = j-1;
       }

       dist[j+1] = key;
   }
}

void ParMerge(double *dist, double *temp, unsigned long long p1, unsigned long long r1, unsigned long long p2, unsigned long long r2, unsigned long long p3)
{
    unsigned long long n1 = r1 - p1 + 1;
    unsigned long long n2 = r2 - p2 + 1;
    if(n1 + n2 <= 2048)
    {
        merge(dist, temp, p1, r1, p2, r2, p3);
    }
    else
    {
        if ( n1 < n2)
        {
            unsigned long long a;
            // Swap p1 and p2
            a = p1;
            p1 = p2;
            p2  = a;

            // Swap r1 and r2
            a = r1;
            r1 = r2;
            r2 = a;

            // Swap n1 and n2
            a = n1;
            n1 = n2;
            n2 = a;
        }
        unsigned long long q1 = (p1 + r1)/2;
        unsigned long long q2 = BinarySearch(temp, temp[q1], p2, r2);
        unsigned long long q3 = p3 + (q1 - p1) + (q2 - p2);
        dist[q3] = temp[q1];
        cilk_spawn ParMerge(dist, temp, p1, q1 - 1, p2, q2 - 1, p3);
        ParMerge(dist, temp, q1 + 1, r1, q2, r2, q3 + 1);
        cilk_sync;
    }
}

unsigned long long BinarySearch(double *temp, unsigned long long key, unsigned long long p2, unsigned long long r2)
{
    unsigned long long m;
    unsigned long long l = p2;
    unsigned long long r = max(l, r2 + 1);
    while( r > l)
    {
        m = l + (r-l)/2;

                if( temp[m] <= key && temp[m+1] > key)
                        return m+1;

                if (temp[m] > key)
                        r = m;
                else
                        l = m+1;
        }
        return r;
}

void ParMergeSortPM(double *dist, double *temp, unsigned long long p, unsigned long long r)
{
    unsigned long long n = r - p + 1;
    unsigned long long i;
    if(n <= 128)
        insertionSort(dist, p, r);
    else
    {
        unsigned long long q = (p + r)/2;
        cilk_spawn ParMergeSortPM(dist, temp, p, q);
        ParMergeSortPM(dist, temp, q+1, r);
        cilk_sync;
        for(i=p;i<=r;i++)
            temp[i] = dist[i];
        ParMerge(dist, temp, p, q, q+1, r, p);
    }
}

extern "C++" int ParMergeSortPM_CPP(double *dist, double *temp, unsigned long long p, unsigned long long r)
{
	return cilk::run(ParMergeSortPM, dist, temp, p, r);
}

